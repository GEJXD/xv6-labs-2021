1. 13属于第三个参数(第一个为format string，第二个为`f(8) + 1`)。所以存储在$a_2$寄存器中。

2. 首先将栈顶指针`sp`往下移动16字节，等价与要入栈两个元素。将`ra`，即caller进程的`pc`值，存入栈的第一个位置。将`s0`，即caller进程的其他寄存器保存地址，存放到第二个位置。

然后将`a0`的值加3，存储到`a0`寄存器中。然后从栈中恢复`ra`和`s0`的地址，此时CPU能返回原进程继续执行。然后`ret`指令将`a0`复制给原进程，即返回值。

`f()`函数和`g()`大同小异，只是编译器将`return g(x)`直接展开为`x + 3`了。 

`main`函数中可以看到，直接将12写入`a1`，直接将13写入`a2`。所以推测直接将`f(8) + 1`计算在编译器计算出来，当常数写入了。

3. 可以看到`jalr`跳转到了`ra + 1544`的地址，也就是`0x640`的地方。所以printf应该在这个位置。

4. 当程序进行跳转时，我们需要将 ra 寄存器存储的返回地址指向 printf 执行结束后返回到主程序的位置，也就是当前位置 PC 加 4，也就是 0x38

5. HE110 WORLD

6. 为初始化，内存里是啥就是啥。
